import bcrypt from "bcryptjs"; // Importing bcrypt for hashing passwords.
import mongoose, { model, models, Schema } from "mongoose"; // Importing necessary mongoose methods and types for schema definition and model creation.

export interface UserInterface {
  email: string; // Email of the user, required for registration/login.
  password: string; // Password of the user, stored after hashing.
  _id?: mongoose.Types.ObjectId; // Optional: The user's unique identifier (automatically generated by MongoDB).
  createdAt: Date; // Date when the user was created (handled by mongoose's `timestamps`).
  updatedAt: Date; // Date when the user was last updated (handled by mongoose's `timestamps`).
}

// Defining the user schema with the required fields and using timestamps to automatically manage creation and update times.
const userSchema = new Schema<UserInterface>(
  {
    email: {
      type: String,
      unique: true, // Ensures each email is unique across users.
      required: true, // Email is required to create a user.
    },
    password: {
      type: String,
      required: true, // Password is required to create a user.
    },
  },
  { timestamps: true } // Automatically adds `createdAt` and `updatedAt` fields to the schema.
);

// Pre-save middleware to hash the password before saving it to the database.
// This ensures passwords are stored securely and not in plain text.
userSchema.pre("save", async function (next) {
  // Check if the password is modified before saving (e.g., during user registration or password change).
  if (this.isModified("password")) {
    // Hash the password using bcrypt with a salt rounds of 10.
    this.password = await bcrypt.hash(this.password, 10);
  }
  next(); // Proceed to save the user after the password is hashed.
});

// Check if the 'User' model already exists in the mongoose models cache.
// If it exists, use the existing model, otherwise, create a new model based on the schema.
const User = models?.User || model<UserInterface>("User", userSchema);

export default User;
